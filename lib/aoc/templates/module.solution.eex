defmodule <%= inspect vars.module %> do
  alias AoC.Input

  def parse(input, _part) do
    <%= if vars.comments? do %>
    # This function will receive the input path or an %AoC.Input.TestInput{}
    # struct.  To support the test you may read both types of input with either:
    #
    # * Input.stream!(input), equivalent to File.stream!/1
    # * Input.stream!(input, trim: true), equivalent to File.stream!/2
    # * Input.read!(input), equivalent to File.read!/1
    #
    # The role of your parse/2 function is to return a "problem" for the solve/2
    # function.
    #
    # For instance:
    #
    # input
    # |> Input.stream!()
    # |> Enum.map!(&my_parse_line_function/1)
    <% end %>

    Input.read!(input)
  end

  def part_one(problem) do
    <%= if vars.comments? do %>
    # This function receives the problem returned by parse/2 and must return
    # today's problem solution for part one.
    <% end %>
    problem
  end

  # def part_two(problem) do
  #   problem
  # end
end
